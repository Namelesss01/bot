// index.js ‚Äî –≤–µ—Ä—Å–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º -100 –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π username
import { TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions/index.js';
import { NewMessage } from 'telegram/events/NewMessage.js';
import input from 'input';
import { Telegraf, Markup } from 'telegraf';
import fs from 'fs';
import 'dotenv/config';

const apiId = parseInt(process.env.API_ID);
const apiHash = process.env.API_HASH;
const botToken = process.env.BOT_TOKEN;
const session = new StringSession(process.env.STRING_SESSION);
const DB_FILE = './db.json';
const PAIRS_FILE = './channelPairs.json';

function loadJSON(path, fallback) {
  try {
    return fs.existsSync(path) ? JSON.parse(fs.readFileSync(path, 'utf-8')) : fallback;
  } catch {
    return fallback;
  }
}

function saveJSON(path, data) {
  fs.writeFileSync(path, JSON.stringify(data, (_, v) => (typeof v === 'bigint' ? v.toString() : v), 2));
}

let db = loadJSON(DB_FILE, {
  pairs: [],
  filters: ['—Ç–æ—Ä–≥', '—Ü–µ–Ω–∞', '—Å—Ä–æ—á–Ω–æ', '–Ω–µ–¥–æ—Ä–æ–≥–æ', '–±–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤'],
  admins: [],
  forwardingEnabled: true,
  stats: []
});

const client = new TelegramClient(session, apiId, apiHash, { connectionRetries: 5 });
await client.start({
  phoneNumber: async () => await input.text('üì± –¢–µ–ª–µ—Ñ–æ–Ω: '),
  password: async () => await input.text('üîê 2FA –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å): '),
  phoneCode: async () => await input.text('üí¨ –ö–æ–¥ –∏–∑ Telegram: '),
  onError: (err) => console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', err),
});

console.log('‚úÖ TelegramClient –∑–∞–ø—É—â–µ–Ω');
console.log('üîë StringSession:', client.session.save());

const bot = new Telegraf(botToken);

bot.start((ctx) => ctx.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! /addpair /togglepair /toggleall /listpairs /getid'));

bot.command('addpair', async (ctx) => {
  const [srcInput, tgtInput] = ctx.message.text.split(' ').slice(1);
  if (!srcInput || !tgtInput) return ctx.reply('‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä: /addpair @source @target');

  try {
    const getId = async (val) => {
      if (val.startsWith('@')) {
        const entity = await client.getEntity(val);
        return BigInt(`-100${entity.id}`);
      }
      return BigInt(val.startsWith('-100') ? val : `-100${val}`);
    };

    const source = await getId(srcInput);
    const target = await getId(tgtInput);

    const newPair = { id: Date.now(), source, target, enabled: true };
    db.pairs.push(newPair);
    saveJSON(DB_FILE, db);
    saveJSON(PAIRS_FILE, db.pairs.map(p => ({ sourceId: p.source.toString(), targetId: p.target.toString() })));
    ctx.reply(`‚úÖ –°–≤—è–∑–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:\n–ò–∑: ${source}\n–í: ${target}`);
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä—ã:', e);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∏–∫–∏ –∏–ª–∏ ID.');
  }
});

bot.command('toggleall', (ctx) => {
  db.forwardingEnabled = !db.forwardingEnabled;
  saveJSON(DB_FILE, db);
  ctx.reply(`üîÅ –í—Å–µ —Å–≤—è–∑–∫–∏: ${db.forwardingEnabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'}`);
});

bot.command('togglepair', (ctx) => {
  const id = parseInt(ctx.message.text.split(' ')[1]);
  const pair = db.pairs.find(p => p.id === id);
  if (!pair) return ctx.reply('‚ùå –°–≤—è–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  pair.enabled = !pair.enabled;
  saveJSON(DB_FILE, db);
  ctx.reply(`üîÅ –°–≤—è–∑–∫–∞ ${id}: ${pair.enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);
});

bot.command('listpairs', (ctx) => {
  if (db.pairs.length === 0) return ctx.reply('üì≠ –°–≤—è–∑–æ–∫ –Ω–µ—Ç');
  db.pairs.forEach(p => {
    ctx.reply(`üîó ID: ${p.id}\n–ò–∑: ${p.source}\n–í: ${p.target}\n–°—Ç–∞—Ç—É—Å: ${p.enabled ? '‚úÖ' : '‚ùå'}`,
      Markup.inlineKeyboard([
        Markup.button.callback(p.enabled ? '–û—Ç–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å', `toggle_${p.id}`)
      ]));
  });
});

bot.command('getid', async (ctx) => {
  const username = ctx.message.text.split(' ')[1];
  if (!username) return ctx.reply('‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä: /getid @channel');
  try {
    const entity = await client.getEntity(username);
    ctx.reply(`‚ÑπÔ∏è Username: ${username}\nüÜî ID: \`${entity.id}\`\nüì¶ –¢–∏–ø: ${entity.className}`, { parse_mode: 'Markdown' });
  } catch {
    ctx.reply('‚ùå –û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å username.');
  }
});

bot.on('callback_query', (ctx) => {
  const id = parseInt(ctx.callbackQuery.data.replace('toggle_', ''));
  const pair = db.pairs.find(p => p.id === id);
  if (!pair) return;
  pair.enabled = !pair.enabled;
  saveJSON(DB_FILE, db);
  ctx.editMessageText(`üîó ID: ${pair.id}\n–ò–∑: ${pair.source}\n–í: ${pair.target}\n–°—Ç–∞—Ç—É—Å: ${pair.enabled ? '‚úÖ' : '‚ùå'}`,
    Markup.inlineKeyboard([Markup.button.callback(pair.enabled ? '–û—Ç–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å', `toggle_${pair.id}`)]));
});

bot.launch();
console.log('ü§ñ Telegraf-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω');

client.addEventHandler(async (event) => {
  const msg = event.message;
  const fromId = msg.chatId?.value;
  if (!fromId || !db.forwardingEnabled) return;

  for (const pair of db.pairs.filter(p => p.source === fromId && p.enabled)) {
    const text = msg.message || '';
    if (db.filters.some(w => text.toLowerCase().includes(w))) return;

    try {
      if (msg.media) {
        await client.sendFile(pair.target, {
          file: msg.media,
          caption: text,
          forceDocument: false
        });
      } else {
        await client.sendMessage(pair.target, { message: text });
      }

      db.stats.push({ source: pair.source, target: pair.target, time: Date.now() });
      saveJSON(DB_FILE, db);
      console.log(`üì§ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ ${pair.source} –≤ ${pair.target}`);
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:', e.message);
    }
  }
}, new NewMessage({}));

console.log('üì° –ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π...');
